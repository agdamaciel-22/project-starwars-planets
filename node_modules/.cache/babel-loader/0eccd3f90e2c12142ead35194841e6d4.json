{"ast":null,"code":"var _jsxFileName = \"/home/myrella/\\xC1rea de Trabalho/projetos2/sd-021-b-project-starwars-planets-search/src/context/TableProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TableContext from './TableContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TableProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState(null);\n  const [name, setName] = useState('');\n  const [filteredData, setFilteredData] = useState(null);\n  const [isAlreadyFiltered, changeAlreadyFilter] = useState(false);\n  const [filterColumns, setFilterColumns] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [filterByNumericValues, setFilteredValues] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0\n  });\n  const [order, setOrder] = useState({\n    orderColumn: 'population',\n    sort: 'ASC'\n  });\n\n  const sortAlphabetically = (a, b) => a.name.localeCompare(b.name);\n\n  const fetchDataFromApi = async () => {\n    const request = await fetch('https://swapi-trybe.herokuapp.com/api/planets/?format=json');\n    const response = await request.json();\n    const result = await response.results.map(planet => {\n      delete planet.residents;\n      return planet;\n    });\n    setData(result.sort(sortAlphabetically));\n    setFilteredData(result.sort(sortAlphabetically));\n  };\n\n  useEffect(() => {\n    fetchDataFromApi();\n  }, []);\n  useEffect(() => {\n    setFilteredValues(prevState => ({ ...prevState,\n      column: filterColumns[0]\n    }));\n  }, [filterColumns]);\n\n  const onChangeName = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    setName(target.value);\n  };\n\n  const returnFilterExpression = elem => {\n    const {\n      column,\n      comparison,\n      value\n    } = filterByNumericValues;\n\n    switch (comparison) {\n      case 'maior que':\n        return Number(elem[column]) > value;\n\n      case 'menor que':\n        return Number(elem[column]) < value;\n\n      default:\n        return elem[column] === value;\n    }\n  };\n\n  const removeSelectedColumn = () => {\n    const {\n      column\n    } = filterByNumericValues;\n    setFilterColumns(filterColumns.filter(value => value !== column));\n  };\n\n  const filterDataByValues = () => {\n    removeSelectedColumn();\n    const dataToFilter = isAlreadyFiltered ? filteredData : data;\n    const filteredDataByValues = dataToFilter.filter(returnFilterExpression);\n    console.log(filteredDataByValues);\n    setFilteredData(filteredDataByValues);\n    changeAlreadyFilter(true);\n  };\n\n  const onChangeFilterValues = _ref3 => {\n    let {\n      target\n    } = _ref3;\n    setFilteredValues({ ...filterByNumericValues,\n      [target.name]: target.value\n    });\n  };\n\n  const onChangeSort = _ref4 => {\n    let {\n      target\n    } = _ref4;\n    setOrder({ ...order,\n      [target.name]: target.value\n    });\n  };\n\n  const sortList = () => {\n    const {\n      sort,\n      orderColumn\n    } = order;\n\n    const isUnknown = planet => planet[orderColumn] === 'unknown';\n\n    const unknownElements = data.filter(isUnknown);\n    const sortedElements = data.filter(p => !isUnknown(p)).sort((a, b) => sort === 'ASC' ? a[orderColumn] - b[orderColumn] : b[orderColumn] - a[orderColumn]);\n    setData([...sortedElements, ...unknownElements]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableContext.Provider, {\n    value: {\n      data,\n      filterByName: name,\n      onChangeName,\n      onChangeFilterValues,\n      filterByNumericValues,\n      filterDataByValues,\n      filteredData,\n      isAlreadyFiltered,\n      filterColumns,\n      onChangeSort,\n      order,\n      sortList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableProvider, \"5q+QibcFQxyu18zD5obcK4DCeJk=\");\n\n_c = TableProvider;\nTableProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default TableProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableProvider\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","TableContext","TableProvider","children","data","setData","name","setName","filteredData","setFilteredData","isAlreadyFiltered","changeAlreadyFilter","filterColumns","setFilterColumns","filterByNumericValues","setFilteredValues","column","comparison","value","order","setOrder","orderColumn","sort","sortAlphabetically","a","b","localeCompare","fetchDataFromApi","request","fetch","response","json","result","results","map","planet","residents","prevState","onChangeName","target","returnFilterExpression","elem","Number","removeSelectedColumn","filter","filterDataByValues","dataToFilter","filteredDataByValues","console","log","onChangeFilterValues","onChangeSort","sortList","isUnknown","unknownElements","sortedElements","p","filterByName","propTypes","node","isRequired"],"sources":["/home/myrella/Área de Trabalho/projetos2/sd-021-b-project-starwars-planets-search/src/context/TableProvider.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TableContext from './TableContext';\n\nfunction TableProvider({ children }) {\n  const [data, setData] = useState(null);\n  const [name, setName] = useState('');\n  const [filteredData, setFilteredData] = useState(null);\n  const [isAlreadyFiltered, changeAlreadyFilter] = useState(false);\n  const [filterColumns, setFilterColumns] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water']);\n  const [filterByNumericValues, setFilteredValues] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [order, setOrder] = useState({\n    orderColumn: 'population',\n    sort: 'ASC',\n  });\n\n  const sortAlphabetically = (a, b) => a.name.localeCompare(b.name);\n\n  const fetchDataFromApi = async () => {\n    const request = await fetch(\n      'https://swapi-trybe.herokuapp.com/api/planets/?format=json',\n    );\n    const response = await request.json();\n    const result = await response.results.map((planet) => {\n      delete planet.residents;\n      return planet;\n    });\n    setData(result.sort(sortAlphabetically));\n    setFilteredData(result.sort(sortAlphabetically));\n  };\n  useEffect(() => {\n    fetchDataFromApi();\n  }, []);\n  useEffect(() => {\n    setFilteredValues((prevState) => ({\n      ...prevState,\n      column: filterColumns[0],\n    }));\n  }, [filterColumns]);\n  const onChangeName = ({ target }) => {\n    setName(target.value);\n  };\n  const returnFilterExpression = (elem) => {\n    const { column, comparison, value } = filterByNumericValues;\n    switch (comparison) {\n    case 'maior que':\n      return Number(elem[column]) > value;\n    case 'menor que':\n      return Number(elem[column]) < value;\n    default:\n      return elem[column] === value;\n    }\n  };\n  const removeSelectedColumn = () => {\n    const { column } = filterByNumericValues;\n    setFilterColumns(filterColumns.filter((value) => value !== column));\n  };\n  const filterDataByValues = () => {\n    removeSelectedColumn();\n    const dataToFilter = isAlreadyFiltered ? filteredData : data;\n    const filteredDataByValues = dataToFilter.filter(returnFilterExpression);\n    console.log(filteredDataByValues);\n    setFilteredData(filteredDataByValues);\n    changeAlreadyFilter(true);\n  };\n  const onChangeFilterValues = ({ target }) => {\n    setFilteredValues({\n      ...filterByNumericValues,\n      [target.name]: target.value,\n    });\n  };\n\n  const onChangeSort = ({ target }) => {\n    setOrder({\n      ...order,\n      [target.name]: target.value,\n    });\n  };\n\n  const sortList = () => {\n    const { sort, orderColumn } = order;\n    const isUnknown = (planet) => planet[orderColumn] === 'unknown';\n    const unknownElements = data.filter(isUnknown);\n    const sortedElements = data.filter((p) => !isUnknown(p)).sort((a, b) => (\n      sort === 'ASC' ? a[orderColumn] - b[orderColumn] : b[orderColumn] - a[orderColumn]\n    ));\n    setData([...sortedElements, ...unknownElements]);\n  };\n  return (\n    <TableContext.Provider\n      value={ {\n        data,\n        filterByName: name,\n        onChangeName,\n        onChangeFilterValues,\n        filterByNumericValues,\n        filterDataByValues,\n        filteredData,\n        isAlreadyFiltered,\n        filterColumns,\n        onChangeSort,\n        order,\n        sortList,\n      } }\n    >\n      {children}\n    </TableContext.Provider>\n  );\n}\nTableProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default TableProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}