{"ast":null,"code":"var _jsxFileName = \"/home/myrella/\\xC1rea de Trabalho/projetos2/sd-021-b-project-starwars-planets-search/src/context/TableProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TableContext from './TableContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TableProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState(null);\n  const [name, setName] = useState('');\n  const [filteredData, setFilteredData] = useState(null);\n  const [isAlreadyFiltered, changeAlreadyFilter] = useState(false);\n  const [filterButtonsData, setFilterButtonsData] = useState([]);\n  const [filterColumns, setFilterColumns] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [filterByNumericValues, setFilteredValues] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0\n  });\n  const [order, setOrder] = useState({\n    orderColumn: 'population',\n    sort: 'ASC'\n  });\n\n  const sortAlphabetically = (a, b) => a.name.localeCompare(b.name);\n\n  const fetchDataFromApi = async () => {\n    const request = await fetch('https://swapi-trybe.herokuapp.com/api/planets/?format=json');\n    const response = await request.json();\n    const result = await response.results.map(planet => {\n      delete planet.residents;\n      return planet;\n    });\n    setData(result.sort(sortAlphabetically));\n    setFilteredData(result.sort(sortAlphabetically));\n  };\n\n  useEffect(() => {\n    fetchDataFromApi();\n  });\n  useEffect(() => {\n    setFilteredValues(prevState => ({ ...prevState,\n      column: filterColumns[0]\n    }));\n  }, [filterColumns]);\n\n  const returnFilterExpression = elem => {\n    const {\n      column,\n      comparison,\n      value\n    } = filterByNumericValues;\n\n    switch (comparison) {\n      case 'maior que':\n        return Number(elem[column]) > value;\n\n      case 'menor que':\n        return Number(elem[column]) < value;\n\n      default:\n        return elem[column] === value;\n    }\n  };\n\n  const removeSelectedColumn = () => {\n    const {\n      column\n    } = filterByNumericValues;\n    setFilterColumns(filterColumns.filter(value => value !== column));\n  };\n\n  const sendDataToButton = () => {\n    const {\n      column,\n      comparison,\n      value\n    } = filterByNumericValues;\n    setFilterButtonsData([...filterButtonsData, {\n      column,\n      comparison,\n      value\n    }]);\n  };\n\n  const filterDataByValues = () => {\n    removeSelectedColumn();\n    sendDataToButton();\n    const dataToFilter = isAlreadyFiltered ? filteredData : data;\n    const filteredDataByValues = dataToFilter.filter(returnFilterExpression);\n    console.log(filteredDataByValues);\n    setFilteredData(filteredDataByValues);\n    changeAlreadyFilter(true);\n  };\n\n  const removeFilter = elementIndex => {\n    const itemsToFilter = filterButtonsData.filter((el, i) => i !== elementIndex);\n    let filteredItems = [];\n    itemsToFilter.forEach(_ref2 => {\n      let {\n        column,\n        comparison,\n        value\n      } = _ref2;\n      filteredItems = [...filteredItems, ...data.filter(el => {\n        switch (comparison) {\n          case 'maior que':\n            return Number(el[column]) > value;\n\n          case 'menor que':\n            return Number(el[column]) < value;\n\n          default:\n            return el[column] === value;\n        }\n      })];\n    });\n    console.log(filteredItems);\n    const {\n      column\n    } = filterButtonsData[elementIndex];\n    const nonSelectedBtn = filterButtonsData.filter((b, index) => index !== elementIndex);\n\n    if (filterButtonsData.length === 1) {\n      setFilteredData(data);\n    } else {\n      setFilteredData(filteredItems);\n    }\n\n    setFilterButtonsData(nonSelectedBtn);\n    setFilterColumns([...filterColumns, column]);\n  };\n\n  const removeAllFilters = () => {\n    changeAlreadyFilter(false);\n    setFilterButtonsData([]);\n    setFilterColumns(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  };\n\n  const sortList = () => {\n    const {\n      sort,\n      orderColumn\n    } = order;\n\n    const isUnknown = planet => planet[orderColumn] === 'unknown';\n\n    const unknownElements = data.filter(isUnknown);\n    const sortedElements = data.filter(p => !isUnknown(p)).sort((a, b) => sort === 'ASC' ? a[orderColumn] - b[orderColumn] : b[orderColumn] - a[orderColumn]);\n    setData([...sortedElements, ...unknownElements]);\n  };\n\n  const onChangeFilterValues = _ref3 => {\n    let {\n      target\n    } = _ref3;\n    setFilteredValues({ ...filterByNumericValues,\n      [target.name]: target.value\n    });\n  };\n\n  const onChangeSort = _ref4 => {\n    let {\n      target\n    } = _ref4;\n    setOrder({ ...order,\n      [target.name]: target.value\n    });\n  };\n\n  const onChangeName = _ref5 => {\n    let {\n      target\n    } = _ref5;\n    setName(target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableContext.Provider, {\n    value: {\n      data,\n      filterByName: name,\n      onChangeName,\n      onChangeFilterValues,\n      filterByNumericValues,\n      filterDataByValues,\n      filteredData,\n      isAlreadyFiltered,\n      filterColumns,\n      onChangeSort,\n      order,\n      sortList,\n      filterButtonsData,\n      removeFilter,\n      removeAllFilters\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableProvider, \"x50ifT9BVZsUW7p9S5wa7LEs0Gc=\");\n\n_c = TableProvider;\nTableProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default TableProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableProvider\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","TableContext","TableProvider","children","data","setData","name","setName","filteredData","setFilteredData","isAlreadyFiltered","changeAlreadyFilter","filterButtonsData","setFilterButtonsData","filterColumns","setFilterColumns","filterByNumericValues","setFilteredValues","column","comparison","value","order","setOrder","orderColumn","sort","sortAlphabetically","a","b","localeCompare","fetchDataFromApi","request","fetch","response","json","result","results","map","planet","residents","prevState","returnFilterExpression","elem","Number","removeSelectedColumn","filter","sendDataToButton","filterDataByValues","dataToFilter","filteredDataByValues","console","log","removeFilter","elementIndex","itemsToFilter","el","i","filteredItems","forEach","nonSelectedBtn","index","length","removeAllFilters","sortList","isUnknown","unknownElements","sortedElements","p","onChangeFilterValues","target","onChangeSort","onChangeName","filterByName","propTypes","node","isRequired"],"sources":["/home/myrella/Área de Trabalho/projetos2/sd-021-b-project-starwars-planets-search/src/context/TableProvider.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TableContext from './TableContext';\n\nfunction TableProvider({ children }) {\n  const [data, setData] = useState(null);\n  const [name, setName] = useState('');\n  const [filteredData, setFilteredData] = useState(null);\n  const [isAlreadyFiltered, changeAlreadyFilter] = useState(false);\n  const [filterButtonsData, setFilterButtonsData] = useState([]);\n  const [filterColumns, setFilterColumns] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water']);\n  const [filterByNumericValues, setFilteredValues] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [order, setOrder] = useState({\n    orderColumn: 'population',\n    sort: 'ASC',\n  });\n  const sortAlphabetically = (a, b) => a.name.localeCompare(b.name);\n  const fetchDataFromApi = async () => {\n    const request = await fetch(\n      'https://swapi-trybe.herokuapp.com/api/planets/?format=json',\n    );\n    const response = await request.json();\n    const result = await response.results.map((planet) => {\n      delete planet.residents;\n      return planet;\n    });\n    setData(result.sort(sortAlphabetically));\n    setFilteredData(result.sort(sortAlphabetically));\n  };\n  useEffect(() => {\n    fetchDataFromApi();\n  });\n  useEffect(() => {\n    setFilteredValues((prevState) => ({\n      ...prevState,\n      column: filterColumns[0],\n    }));\n  }, [filterColumns]);\n\n  const returnFilterExpression = (elem) => {\n    const { column, comparison, value } = filterByNumericValues;\n    switch (comparison) {\n    case 'maior que':\n      return Number(elem[column]) > value;\n    case 'menor que':\n      return Number(elem[column]) < value;\n    default:\n      return elem[column] === value;\n    }\n  };\n  const removeSelectedColumn = () => {\n    const { column } = filterByNumericValues;\n    setFilterColumns(filterColumns.filter((value) => value !== column));\n  };\n\n  const sendDataToButton = () => {\n    const { column, comparison, value } = filterByNumericValues;\n    setFilterButtonsData([...filterButtonsData, { column, comparison, value }]);\n  };\n\n  const filterDataByValues = () => {\n    removeSelectedColumn();\n    sendDataToButton();\n    const dataToFilter = isAlreadyFiltered ? filteredData : data;\n    const filteredDataByValues = dataToFilter.filter(returnFilterExpression);\n    console.log(filteredDataByValues);\n    setFilteredData(filteredDataByValues);\n    changeAlreadyFilter(true);\n  };\n\n  const removeFilter = (elementIndex) => {\n    const itemsToFilter = filterButtonsData.filter((el, i) => i !== elementIndex);\n    let filteredItems = [];\n    itemsToFilter.forEach(({ column, comparison, value }) => {\n      filteredItems = [...filteredItems, ...data.filter((el) => {\n        switch (comparison) {\n        case 'maior que':\n          return Number(el[column]) > value;\n        case 'menor que':\n          return Number(el[column]) < value;\n        default:\n          return el[column] === value;\n        }\n      })];\n    });\n    console.log(filteredItems);\n    const { column } = filterButtonsData[elementIndex];\n    const nonSelectedBtn = filterButtonsData.filter((b, index) => index !== elementIndex);\n    if (filterButtonsData.length === 1) {\n      setFilteredData(data);\n    } else {\n      setFilteredData(filteredItems);\n    }\n    setFilterButtonsData(nonSelectedBtn);\n    setFilterColumns([...filterColumns, column]);\n  };\n\n  const removeAllFilters = () => {\n    changeAlreadyFilter(false);\n    setFilterButtonsData([]);\n    setFilterColumns([\n      'population',\n      'orbital_period',\n      'diameter',\n      'rotation_period',\n      'surface_water']);\n  };\n\n  const sortList = () => {\n    const { sort, orderColumn } = order;\n    const isUnknown = (planet) => planet[orderColumn] === 'unknown';\n    const unknownElements = data.filter(isUnknown);\n    const sortedElements = data.filter((p) => !isUnknown(p)).sort((a, b) => (\n      sort === 'ASC' ? a[orderColumn] - b[orderColumn] : b[orderColumn] - a[orderColumn]\n    ));\n    setData([...sortedElements, ...unknownElements]);\n  };\n\n  const onChangeFilterValues = ({ target }) => {\n    setFilteredValues({\n      ...filterByNumericValues,\n      [target.name]: target.value,\n    });\n  };\n  const onChangeSort = ({ target }) => {\n    setOrder({\n      ...order,\n      [target.name]: target.value,\n    });\n  };\n\n  const onChangeName = ({ target }) => {\n    setName(target.value);\n  };\n\n  return (\n    <TableContext.Provider\n      value={ {\n        data,\n        filterByName: name,\n        onChangeName,\n        onChangeFilterValues,\n        filterByNumericValues,\n        filterDataByValues,\n        filteredData,\n        isAlreadyFiltered,\n        filterColumns,\n        onChangeSort,\n        order,\n        sortList,\n        filterButtonsData,\n        removeFilter,\n        removeAllFilters,\n      } }\n    >\n      {children}\n    </TableContext.Provider>\n  );\n}\nTableProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default TableProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}